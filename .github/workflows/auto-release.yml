name: Automated Release Management

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check.outputs.has-changes }}
      release-type: ${{ steps.check.outputs.release-type }}
      version-bump: ${{ steps.check.outputs.version-bump }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect changes and version bump
        id: check
        run: |
          # Get the last two commits
          LAST_COMMIT=$(git log -1 --pretty=format:"%s")
          PREV_COMMIT=$(git log -2 --skip=1 --pretty=format:"%s" | head -n1)

          echo "Last commit: $LAST_COMMIT"
          echo "Previous commit: $PREV_COMMIT"

          # Determine if we have feature-x changes
          if echo "$LAST_COMMIT" | grep -q "feature-x\|Auto-merge"; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Detected feature-x related changes"

            # Determine version bump type
            RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"

            if echo "$LAST_COMMIT" | grep -q "breaking\|major"; then
              RELEASE_TYPE="major"
            elif echo "$LAST_COMMIT" | grep -q "feature\|new"; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi

            echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
            echo "version-bump=true" >> $GITHUB_OUTPUT
            echo "Will create $RELEASE_TYPE release"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No feature-x related changes detected"
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.has-changes == 'true' &&
      (github.event.inputs.create_release == 'true' || github.event_name == 'push')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for version management
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release tools
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g @semantic-release/github

      - name: Configure semantic-release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Create release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current version
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $CURRENT_VERSION"

          # Generate release notes
          RELEASE_TYPE="${{ needs.detect-changes.outputs.release-type }}"

          # Extract changes since last release
          NOTES="## Changes in this release\n\n"
          NOTES+="**Automated release from feature-x branch**\n\n"
          NOTES+="**Release Type:** $RELEASE_TYPE\n\n"

          # Get recent commits related to feature-x
          COMMITS=$(git log --oneline --grep="feature-x\|Auto-merge" -10)
          if [ -n "$COMMITS" ]; then
            NOTES+="### Recent Changes\n\n"
            echo "$COMMITS" | while read commit; do
              NOTES+="- $commit\n"
            done
          fi

          NOTES+="\n---\n*This release was automatically created by the feature-x workflow automation*"

          # Create a simple version bump
          if [ "$CURRENT_VERSION" = "v0.0.0" ]; then
            NEW_VERSION="v0.1.0"
          else
            # Simple version bump logic
            BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/^v//')
            MAJOR=$(echo "$BASE_VERSION" | cut -d. -f1)
            MINOR=$(echo "$BASE_VERSION" | cut -d. -f2)
            PATCH=$(echo "$BASE_VERSION" | cut -d. -f3)

            case "$RELEASE_TYPE" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Create the release using GitHub CLI
          if command -v gh &> /dev/null; then
            echo "Creating release with GitHub CLI..."
            gh release create "$NEW_VERSION" \
              --title "Release $NEW_VERSION" \
              --notes "$NOTES" \
              --target main \
              --latest
          else
            echo "GitHub CLI not available, using API..."
            # Fallback to GitHub API
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "{
                \"tag_name\": \"$NEW_VERSION\",
                \"target_commitish\": \"main\",
                \"name\": \"Release $NEW_VERSION\",
                \"body\": $NOTES,
                \"draft\": false,
                \"prerelease\": false
              }"
          fi

      - name: Update status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.release.outputs.version }}';
            const releaseType = '${{ needs.detect-changes.outputs.release-type }}';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version}`,
              description: `Released ${version} (${releaseType})`,
              context: 'auto-release'
            });

            console.log(`âœ… Release ${version} created successfully`);

  notify-release:
    runs-on: ubuntu-latest
    needs: [detect-changes, create-release]
    if: needs.create-release.result == 'success'

    steps:
      - name: Create release notification issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.release.outputs.version }}';
            const releaseType = '${{ needs.detect-changes.outputs.release-type }}';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš€ Release ${version} Published`,
              body: `## Release Notification

            **Version:** ${version}
            **Type:** ${releaseType}
            **Triggered by:** Automated feature-x workflow

            The new release has been successfully created and published.

            ### Quick Links
            - [Release Notes](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version})
            - [Download Assets](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/latest)
            - [Changelog](https://github.com/${context.repo.owner}/${context.repo.repo}/commits/v${version.replace('v', '')})

            ---
            *This notification was automatically generated by the feature-x automation workflow.*
            `,
              labels: ['release', 'automated', 'feature-x']
            });

            console.log('âœ… Release notification created');